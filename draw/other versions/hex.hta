<head>
  <title>Pixel Draw Game</title>
  <HTA:APPLICATION
    ID="PixelDraw"
    APPLICATIONNAME="Pixel Draw Game"
    BORDER="thin"
    SCROLL="no"
    SINGLEINSTANCE="yes"
    WINDOWSTATE="normal"
  />
  <meta http-equiv="X-UA-Compatible" content="IE=9">
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      overflow: hidden;
      font-family: sans-serif;
      background: #f0f0f0;
      text-align: center;
    }
    #palette, #tools, #customColor {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin: 4px;
    }
    .color {
      width: 28px;
      height: 28px;
      display: inline-block;
      margin: 2px;
      cursor: pointer;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    .tool {
      margin: 3px;
      padding: 6px 10px;
      font-size: 16px;
      cursor: pointer;
      border-radius: 4px;
    }
    #colorPicker {
      width: 40px;
      height: 40px;
      border: none;
      cursor: pointer;
    }
    #colorPreview {
      width: 28px;
      height: 28px;
      margin-left: 8px;
      border: 1px solid #ccc;
      display: inline-block;
    }
    canvas {
      display: block;
    }
  </style>
</head>
<body>

<div id="palette"></div>

<div id="customColor">
  <input type="color" id="colorPicker" value="#000000">
  <span id="colorPreview"></span>
</div>

<div id="tools">
  <button class="tool" onclick="tool='brush'">Brush</button>
  <button class="tool" onclick="tool='eraser'">Eraser</button>
  <button class="tool" onclick="tool='fill'">Fill</button>
  <button class="tool" onclick="undo()">Undo</button>
  <button class="tool" onclick="redo()">Redo</button>
</div>

<canvas id="canvas"></canvas>

<script>
var canvas = document.getElementById("canvas");
var ctx = canvas.getContext("2d");
var size = 16;
var tileSize;
var tool = 'brush';
var currentColor = "#000000";
var drawing = false;
var lastFill = null;

var grid = [];
for (var i = 0; i < size; i++) {
  grid[i] = [];
  for (var j = 0; j < size; j++) {
    grid[i][j] = "#ffffff";
  }
}

var history = [];
var redoStack = [];

function resizeCanvas() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight 
    - document.getElementById("tools").offsetHeight 
    - document.getElementById("palette").offsetHeight 
    - document.getElementById("customColor").offsetHeight 
    - 8;
  tileSize = Math.min(canvas.width, canvas.height) / size;
  drawGrid();
}
window.attachEvent("onresize", resizeCanvas);

function saveState() {
  history.push(JSON.parse(JSON.stringify(grid)));
  if (history.length > 100) history.shift();
  redoStack = [];
}

function undo() {
  if (history.length === 0) return;
  redoStack.push(JSON.parse(JSON.stringify(grid)));
  grid = history.pop();
  drawGrid();
}

function redo() {
  if (redoStack.length === 0) return;
  history.push(JSON.parse(JSON.stringify(grid)));
  grid = redoStack.pop();
  drawGrid();
}

function drawGrid() {
  for (var y = 0; y < size; y++) {
    for (var x = 0; x < size; x++) {
      ctx.fillStyle = grid[y][x];
      ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);
      ctx.strokeStyle = "#ddd";
      ctx.strokeRect(x * tileSize, y * tileSize, tileSize, tileSize);
    }
  }
}

function floodFill(x, y, targetColor, replacementColor) {
  if (targetColor === replacementColor || grid[y][x] !== targetColor) return;
  grid[y][x] = replacementColor;
  if (x > 0) floodFill(x - 1, y, targetColor, replacementColor);
  if (x < size - 1) floodFill(x + 1, y, targetColor, replacementColor);
  if (y > 0) floodFill(x, y - 1, targetColor, replacementColor);
  if (y < size - 1) floodFill(x, y + 1, targetColor, replacementColor);
}

function handleDraw(e, isStart) {
  var rect = canvas.getBoundingClientRect();
  var x = Math.floor((e.clientX - rect.left) / tileSize);
  var y = Math.floor((e.clientY - rect.top) / tileSize);
  if (x < 0 || y < 0 || x >= size || y >= size) return;

  if (isStart) saveState();

  if (tool === 'fill') {
    var key = x + "," + y;
    if (lastFill !== key) {
      floodFill(x, y, grid[y][x], currentColor);
      lastFill = key;
    }
  } else {
    lastFill = null;
    if (tool === 'brush') {
      grid[y][x] = currentColor;
    } else if (tool === 'eraser') {
      grid[y][x] = "#ffffff";
    }
  }

  drawGrid();
}

canvas.attachEvent("onmousedown", function(e) {
  drawing = true;
  handleDraw(e, true);
});

canvas.attachEvent("onmousemove", function(e) {
  if (drawing) handleDraw(e, false);
});

canvas.attachEvent("onmouseup", function() {
  drawing = false;
  lastFill = null;
});

canvas.attachEvent("onmouseleave", function() {
  drawing = false;
  lastFill = null;
});

var paletteColors = [
  "#ff0000", "#ffa500", "#ffff00", "#00ff00", "#008000",
  "#add8e6", "#0000ff", "#800080", "#ffc0cb", "#c8a165",
  "#a52a2a", "#ffffff", "#d3d3d3", "#808080", "#000000"
];

var palette = document.getElementById("palette");
for (var i = 0; i < paletteColors.length; i++) {
  var swatch = document.createElement("div");
  swatch.className = "color";
  swatch.style.background = paletteColors[i];
  swatch.onclick = (function(color) {
    return function() {
      currentColor = color;
      document.getElementById("colorPicker").value = color;
      document.getElementById("colorPreview").style.background = color;
    };
  })(paletteColors[i]);
  palette.appendChild(swatch);
}

var colorPicker = document.getElementById("colorPicker");
var colorPreview = document.getElementById("colorPreview");

colorPicker.oninput = function() {
  currentColor = colorPicker.value;
  colorPreview.style.background = currentColor;
};

resizeCanvas();
</script>

</body>