<head>
  <title>Pixel Draw Game</title>
  <HTA:APPLICATION ID="PixelDraw" APPLICATIONNAME="Pixel Drawing Game" BORDER="thin" SCROLL="no" SINGLEINSTANCE="yes" WINDOWSTATE="normal"/>
  <meta http-equiv="X-UA-Compatible" content="IE=9">
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      overflow: hidden;
      font-family: sans-serif;
      background: #f0f0f0;
    }

    #topbar {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: #f0f0f0;
      padding: 0 10px;
      z-index: 1;
    }

    #palette {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
    }

    #tools {
      display: flex;
      align-items: center;
    }

    .color {
      width: 24px;
      height: 24px;
      margin: 2px;
      cursor: pointer;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    .tool {
      margin: 2px;
      padding: 4px 8px;
      font-size: 14px;
      cursor: pointer;
      border-radius: 4px;
    }

    #zoomControl {
      margin-left: 10px;
    }

    canvas {
      position: absolute;
      top: 50px;
      left: 0;
      right: 0;
      bottom: 0;
      display: block;
    }
  </style>
</head>
<body>
  <div id="topbar">
    <div id="palette"></div>
    <div id="tools">
      <button class="tool" onclick="tool='brush'">Brush</button>
      <button class="tool" onclick="tool='eraser'">Eraser</button>
      <button class="tool" onclick="tool='fill'">Fill</button>
      <button class="tool" onclick="undo()">Undo</button>
      <button class="tool" onclick="redo()">Redo</button>
      <input id="zoomControl" type="range" min="4" max="20" value="10" onchange="resizeCanvas()" />
    </div>
  </div>
  <canvas id="canvas"></canvas>

  <script>
    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");
    var size = 64;
    var tileSize = 10;
    var tool = 'brush';
    var currentColor = "#000000";
    var drawing = false;
    var lastFill = null;
    var lastX = null;
    var lastY = null;
    var grid = [];

    for (var i = 0; i < size; i++) {
      grid[i] = [];
      for (var j = 0; j < size; j++) {
        grid[i][j] = "#ffffff";
      }
    }

    var history = [];
    var redoStack = [];

    function resizeCanvas() {
      tileSize = parseInt(document.getElementById("zoomControl").value);
      canvas.width = tileSize * size;
      canvas.height = window.innerHeight - 50;
      drawGrid();
    }

    window.attachEvent("onresize", resizeCanvas);

    function saveState() {
      history.push(JSON.parse(JSON.stringify(grid)));
      if (history.length > 100) history.shift();
      redoStack = [];
    }

    function undo() {
      if (history.length === 0) return;
      redoStack.push(JSON.parse(JSON.stringify(grid)));
      grid = history.pop();
      drawGrid();
    }

    function redo() {
      if (redoStack.length === 0) return;
      history.push(JSON.parse(JSON.stringify(grid)));
      grid = redoStack.pop();
      drawGrid();
    }

    function drawGrid() {
      for (var y = 0; y < size; y++) {
        for (var x = 0; x < size; x++) {
          ctx.fillStyle = grid[y][x];
          ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);
          ctx.strokeStyle = "#ddd";
          ctx.strokeRect(x * tileSize, y * tileSize, tileSize, tileSize);
        }
      }
    }

    function floodFill(x, y, targetColor, replacementColor) {
      if (targetColor === replacementColor || grid[y][x] !== targetColor) return;
      grid[y][x] = replacementColor;
      if (x > 0) floodFill(x - 1, y, targetColor, replacementColor);
      if (x < size - 1) floodFill(x + 1, y, targetColor, replacementColor);
      if (y > 0) floodFill(x, y - 1, targetColor, replacementColor);
      if (y < size - 1) floodFill(x, y + 1, targetColor, replacementColor);
    }

    function drawLine(x0, y0, x1, y1, color) {
      var dx = Math.abs(x1 - x0);
      var dy = Math.abs(y1 - y0);
      var sx = (x0 < x1) ? 1 : -1;
      var sy = (y0 < y1) ? 1 : -1;
      var err = dx - dy;

      while (true) {
        if (x0 >= 0 && y0 >= 0 && x0 < size && y0 < size) {
          grid[y0][x0] = color;
        }
        if (x0 === x1 && y0 === y1) break;
        var e2 = 2 * err;
        if (e2 > -dy) { err -= dy; x0 += sx; }
        if (e2 < dx) { err += dx; y0 += sy; }
      }
    }

    function handleDraw(e, isStart) {
      var rect = canvas.getBoundingClientRect();
      var x = Math.floor((e.clientX - rect.left) / tileSize);
      var y = Math.floor((e.clientY - rect.top) / tileSize);
      if (x < 0 || y < 0 || x >= size || y >= size) return;

      if (isStart) {
        saveState();
        lastX = x;
        lastY = y;
      }

      if (tool === 'fill') {
        var key = x + "," + y;
        if (lastFill !== key) {
          floodFill(x, y, grid[y][x], currentColor);
          lastFill = key;
        }
      } else {
        lastFill = null;
        var color = (tool === 'brush') ? currentColor : "#ffffff";
        drawLine(lastX, lastY, x, y, color);
        lastX = x;
        lastY = y;
      }

      drawGrid();
    }

    canvas.attachEvent("onmousedown", function(e) {
      drawing = true;
      handleDraw(e, true);
    });

    canvas.attachEvent("onmousemove", function(e) {
      if (drawing) handleDraw(e, false);
    });

    canvas.attachEvent("onmouseup", function() {
      drawing = false;
      lastFill = null;
      lastX = null;
      lastY = null;
    });

    canvas.attachEvent("onmouseleave", function() {
      drawing = false;
      lastFill = null;
      lastX = null;
      lastY = null;
    });

    var paletteColors = ["#ff0000", "#ffa500", "#ffff00", "#00ff00", "#008000",
                         "#add8e6", "#0000ff", "#800080", "#ffc0cb", "#c8a165",
                         "#a52a2a", "#ffffff", "#d3d3d3", "#808080", "#000000"];
    var palette = document.getElementById("palette");
    for (var i = 0; i < paletteColors.length; i++) {
      var swatch = document.createElement("div");
      swatch.className = "color";
      swatch.style.background = paletteColors[i];
      swatch.onclick = (function(color) {
        return function() {
          currentColor = color;
        };
      })(paletteColors[i]);
      palette.appendChild(swatch);
    }

    resizeCanvas();
  </script>
</body>